{
  "description": "Plugin to search for a specific data in the request or response body",
  "edition": 2,
  "graph": {
    "edges": [
      {
        "source": {
          "exec_alias": "exec",
          "node_id": 14
        },
        "target": {
          "exec_alias": "exec",
          "node_id": 15
        }
      },
      {
        "source": {
          "exec_alias": "true",
          "node_id": 15
        },
        "target": {
          "exec_alias": "exec",
          "node_id": 13
        }
      },
      {
        "source": {
          "exec_alias": "exec",
          "node_id": 13
        },
        "target": {
          "exec_alias": "exec",
          "node_id": 5
        }
      },
      {
        "source": {
          "exec_alias": "false",
          "node_id": 15
        },
        "target": {
          "exec_alias": "exec",
          "node_id": 5
        }
      }
    ],
    "nodes": [
      {
        "alias": "passive_end_1",
        "definition_id": "caido/passive-end",
        "display": {
          "x": 30,
          "y": 280
        },
        "id": 5,
        "inputs": [],
        "name": "Passive End 1",
        "version": "0.1.0"
      },
      {
        "alias": "search_data",
        "definition_id": "caido/http-code-js",
        "display": {
          "x": 30,
          "y": 170
        },
        "id": 13,
        "inputs": [
          {
            "alias": "response",
            "value": {
              "data": "$res.response",
              "kind": "ref"
            }
          },
          {
            "alias": "request",
            "value": {
              "data": "$res.request",
              "kind": "ref"
            }
          },
          {
            "alias": "code",
            "value": {
              "data": "/**\n * @param {HttpInput} input\n * @param {SDK} sdk\n * @returns {MaybePromise<Data | undefined>}\n */\nlet title =\"Values Found\";\nconst reporter =\"Find Data\";\nconst searchTerm = 'id_number'; // Term to search\n\nasync function createFinding(sdk, title, description, severity, request = null) {//To create directly a finding\n  try {\n    await sdk.findings.create({\n      title: title,\n      reporter: reporter,\n      request: request,\n      description: description,\n      severity: severity,\n    });\n    sdk.console.log(`Finding successfully created: ${title}`);\n  } catch (error) {\n    sdk.console.error(`Error creating finding: ${error.message}`);\n  }\n}\n\nexport async function run({ request, response }, sdk) {\n  let idReq = request.getId();\n  let idRes = response.getId();\n  sdk.console.log();\n  let foundAmounts = []; // Array to store all found \"term\" values\n  if (request) {\n    let body = request.getBody().toText();\n    let searchTermIndex = body.indexOf(searchTerm); // Find the position of the term\n    while (searchTermIndex !== -1) {\n      // While term is found:\n      let valueStartIndex = searchTermIndex + searchTerm.length;\n      let commaIndex = body.indexOf('\",', valueStartIndex);// identify the term and take the first value after \",\n      let braceIndex = body.indexOf('}', valueStartIndex);\n      let valueEndIndex = Math.min(commaIndex !== -1 ? commaIndex : Infinity, braceIndex !== -1 ? braceIndex : Infinity);\n\n      if (valueEndIndex !== -1) {\n        let value = body.substring(valueStartIndex, valueEndIndex+1).trim(); // Extract the term\" value\n        foundAmounts.push(value); // Add the found value to the array\n      }\n\n      // Search for the next \"term\" from the position after the current value\n      searchTermIndex = body.indexOf(searchTerm, valueEndIndex);\n    }\n\n    if (foundAmounts.length > 0) {\n      // Create the finding description with all found values\n      const findingDescription = `The following values were found in the response with ID:req ${idReq} res ${idRes}:\\n\\n${foundAmounts.join(\"\\n\")}`;\n      sdk.console.log(findingDescription);\n      await createFinding(sdk,title+\" in request\", findingDescription, \"LOW\", request);\n    } else {\n      sdk.console.log(`No values found for \"${searchTerm}\" in the request with ID:req ${idReq} res ${idRes}.`);\n    }\n\n  }\n  foundAmounts = [];\n  if (response) {//if the value is in the response\n    let body = response.getBody().toText();\n    let searchTermIndex = body.indexOf(searchTerm); // Find the position of the term\n    while (searchTermIndex !== -1) {\n      // While  term is found:\n      let valueStartIndex = searchTermIndex + searchTerm.length;\n      let commaIndex = body.indexOf('\",', valueStartIndex);\n      let braceIndex = body.indexOf('}', valueStartIndex);\n      let valueEndIndex = Math.min(commaIndex !== -1 ? commaIndex : Infinity, braceIndex !== -1 ? braceIndex : Infinity);\n\n      if (valueEndIndex !== -1) {\n        let value = body.substring(valueStartIndex, valueEndIndex+1).trim(); // Extract the \"term\" value\n        foundAmounts.push(value); // Add the found value to the array\n      }\n\n      // Search for the next \"term\" from the position after the current value\n      searchTermIndex = body.indexOf(searchTerm, valueEndIndex);\n    }\n\n    if (foundAmounts.length > 0) {\n      // Create the finding description with all found values\n      const findingDescription = `The following values were found in the response with ID:req ${idReq} res ${idRes}:\\n\\n${foundAmounts.join(\"\\n\")}`;\n      sdk.console.log(findingDescription);\n      await createFinding(sdk,title+\" in response\", findingDescription, \"LOW\", request);\n    } else {\n      sdk.console.log(`No values found for \"${searchTerm}\" in the response with ID:req ${idReq} res ${idRes}.`);\n    }\n  }\n}\n\n",
              "kind": "string"
            }
          }
        ],
        "name": "Search Data in Body",
        "version": "0.1.0"
      },
      {
        "alias": "res",
        "definition_id": "caido/on-intercept-response",
        "display": {
          "x": 30,
          "y": -110
        },
        "id": 14,
        "inputs": [],
        "name": "On Intercept Response",
        "version": "0.1.0"
      },
      {
        "alias": "in_scope",
        "definition_id": "caido/in-scope",
        "display": {
          "x": 30,
          "y": 40
        },
        "id": 15,
        "inputs": [
          {
            "alias": "request",
            "value": {
              "data": "$res.request",
              "kind": "ref"
            }
          }
        ],
        "name": "In Scope",
        "version": "0.1.0"
      }
    ]
  },
  "id": "unique-id-for-plugin",
  "kind": "passive",
  "name": "SearchDataInBody"
}
